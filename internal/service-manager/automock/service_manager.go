// Code generated by mockery v2.43.1. DO NOT EDIT.

package servicemanager

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	types "github.com/kyma-project/btp-manager/internal/service-manager/types"
)

// ServiceManager is an autogenerated mock type for the ServiceManager type
type ServiceManager struct {
	mock.Mock
}

// CreateServiceInstance provides a mock function with given fields: si
func (_m *ServiceManager) CreateServiceInstance(si *types.ServiceInstance) (*types.ServiceInstance, error) {
	ret := _m.Called(si)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceInstance")
	}

	var r0 *types.ServiceInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.ServiceInstance) (*types.ServiceInstance, error)); ok {
		return rf(si)
	}
	if rf, ok := ret.Get(0).(func(*types.ServiceInstance) *types.ServiceInstance); ok {
		r0 = rf(si)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ServiceInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.ServiceInstance) error); ok {
		r1 = rf(si)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Defaults provides a mock function with given fields: ctx
func (_m *ServiceManager) Defaults(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Defaults")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServiceInstance provides a mock function with given fields: serviceInstanceID
func (_m *ServiceManager) DeleteServiceInstance(serviceInstanceID string) error {
	ret := _m.Called(serviceInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceInstanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceInstance provides a mock function with given fields: serviceInstanceID
func (_m *ServiceManager) ServiceInstance(serviceInstanceID string) (*types.ServiceInstance, error) {
	ret := _m.Called(serviceInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for ServiceInstance")
	}

	var r0 *types.ServiceInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.ServiceInstance, error)); ok {
		return rf(serviceInstanceID)
	}
	if rf, ok := ret.Get(0).(func(string) *types.ServiceInstance); ok {
		r0 = rf(serviceInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ServiceInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceInstanceParameters provides a mock function with given fields: serviceInstanceID
func (_m *ServiceManager) ServiceInstanceParameters(serviceInstanceID string) (map[string]string, error) {
	ret := _m.Called(serviceInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for ServiceInstanceParameters")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]string, error)); ok {
		return rf(serviceInstanceID)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(serviceInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceInstances provides a mock function with given fields:
func (_m *ServiceManager) ServiceInstances() (*types.ServiceInstances, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceInstances")
	}

	var r0 *types.ServiceInstances
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.ServiceInstances, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.ServiceInstances); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ServiceInstances)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceOfferingDetails provides a mock function with given fields: serviceOfferingID
func (_m *ServiceManager) ServiceOfferingDetails(serviceOfferingID string) (*types.ServiceOfferingDetails, error) {
	ret := _m.Called(serviceOfferingID)

	if len(ret) == 0 {
		panic("no return value specified for ServiceOfferingDetails")
	}

	var r0 *types.ServiceOfferingDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.ServiceOfferingDetails, error)); ok {
		return rf(serviceOfferingID)
	}
	if rf, ok := ret.Get(0).(func(string) *types.ServiceOfferingDetails); ok {
		r0 = rf(serviceOfferingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ServiceOfferingDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceOfferingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceOfferings provides a mock function with given fields:
func (_m *ServiceManager) ServiceOfferings() (*types.ServiceOfferings, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceOfferings")
	}

	var r0 *types.ServiceOfferings
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.ServiceOfferings, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.ServiceOfferings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ServiceOfferings)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetForGivenSecret provides a mock function with given fields: ctx, secretName, secretNamespace
func (_m *ServiceManager) SetForGivenSecret(ctx context.Context, secretName string, secretNamespace string) error {
	ret := _m.Called(ctx, secretName, secretNamespace)

	if len(ret) == 0 {
		panic("no return value specified for SetForGivenSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, secretName, secretNamespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetHTTPClient provides a mock function with given fields: httpClient
func (_m *ServiceManager) SetHTTPClient(httpClient *http.Client) {
	_m.Called(httpClient)
}

// SetSMURL provides a mock function with given fields: smURL
func (_m *ServiceManager) SetSMURL(smURL string) {
	_m.Called(smURL)
}

// UpdateServiceInstance provides a mock function with given fields: si
func (_m *ServiceManager) UpdateServiceInstance(si *types.ServiceInstanceUpdateRequest) (*types.ServiceInstance, error) {
	ret := _m.Called(si)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceInstance")
	}

	var r0 *types.ServiceInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.ServiceInstanceUpdateRequest) (*types.ServiceInstance, error)); ok {
		return rf(si)
	}
	if rf, ok := ret.Get(0).(func(*types.ServiceInstanceUpdateRequest) *types.ServiceInstance); ok {
		r0 = rf(si)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ServiceInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.ServiceInstanceUpdateRequest) error); ok {
		r1 = rf(si)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceManager creates a new instance of ServiceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceManager {
	mock := &ServiceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
