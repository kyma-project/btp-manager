name: Run performancestress tests (reusable)

on:
  workflow_call:
    inputs:
      image-repo:
        description: Binary image registry reference
        required: true
        type: string
      image-tag:
        description: Binary image tag
        required: true
        type: string
      credentials-mode:
        description: real or dummy credentials
        required: true
        type: string

jobs:
  frequent-secret-update-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Prepare k3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh --wait"

      - name: Wait for artifacts
        env:
          IMAGE_REPO: ${{ inputs.image-repo }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: "./scripts/await_image.sh ${{ inputs.image-tag }}"

      - name: Install BTP Manager and SAP BTP Operator
        env:
          SM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          SM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          SM_URL: ${{ secrets.SM_URL }}
          SM_TOKEN_URL: ${{ secrets.TOKENURL }}  
        timeout-minutes: 2
        run: "./scripts/testing/install_module.sh ${{ inputs.image-repo }}:${{ inputs.image-tag }} ${{ inputs.credentials-mode }} ci"

      - name: Edit sap-btp-manager secret in a loop
        run: |
          for i in {1..10}; do
            kubectl -n kyma-system patch secret sap-btp-manager --type='json' -p='[{"op": "replace", "path": "/data/sm_url", "value": "bmV3X3NtX3VybA=="}]'
            sleep 0.5
            kubectl -n kyma-system patch secret sap-btp-manager --type='json' -p='[{"op": "replace", "path": "/data/sm_url", "value": "dGVzdF9zbV91cmw="}]'
            sleep 0.5
          done

      - name: Fetch metrics from btp-manager-controller-manager
        run: |
          MAX_AVERAGE_RECONCILE_TIME=5
          kubectl port-forward deployment/btp-manager-controller-manager 8080:8080 -n kyma-system &
          sleep 5
          METRICS=$(curl -s http://localhost:8080/metrics)
          SUM=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_sum{controller="btpoperator"}' | awk '{printf "%.2f", $2}')
          COUNT=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_count{controller="btpoperator"}' | awk '{print $2}')
          echo "Sum of reconcile time: $SUM seconds" >> $GITHUB_STEP_SUMMARY
          echo "Count of reconciliations: $COUNT" >> $GITHUB_STEP_SUMMARY
          if [ "$COUNT" -ne 0 ]; then
            AVG=$(echo "scale=2; $SUM / $COUNT" | bc -l)
            echo "Average reconcile time: $AVG seconds" >> $GITHUB_STEP_SUMMARY
            if (( $(echo "$AVG > $MAX_AVERAGE_RECONCILE_TIME" | bc -l) )); then
              echo "::error ::average reconcile time exceeds $MAX_AVERAGE_RECONCILE_TIME seconds. Failing the test."
              exit 1
            fi
          else
            echo "Count is zero, cannot calculate average." >> $GITHUB_STEP_SUMMARY
          fi
          RECONCILE_ERRORS=$(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="error"}' | awk '{print $2}')
          echo "Reconcile errors: $RECONCILE_ERRORS" >> $GITHUB_STEP_SUMMARY
          if [ "$RECONCILE_ERRORS" -gt 0 ]; then
            echo "::error ::reconcile errors detected. Failing the test."
            exit 1
          fi
          echo "Reconcile requeues: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue"}' | awk '{print $2}')" >> $GITHUB_STEP_SUMMARY
          echo "Reconcile requeues after: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue_after"}' | awk '{print $2}')" >> $GITHUB_STEP_SUMMARY
          echo "Reconcile successes: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="success"}' | awk '{print $2}')" >> $GITHUB_STEP_SUMMARY
          

  reconcile-secret-deletion-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Prepare k3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh --wait"

      - name: Wait for artifacts
        env:
          IMAGE_REPO: ${{ inputs.image-repo }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: "./scripts/await_image.sh ${{ inputs.image-tag }}"

      - name: Install BTP Manager and SAP BTP Operator
        env:
          SM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          SM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          SM_URL: ${{ secrets.SM_URL }}
          SM_TOKEN_URL: ${{ secrets.TOKENURL }}
        timeout-minutes: 2
        run: "./scripts/testing/install_module.sh ${{ inputs.image-repo }}:${{ inputs.image-tag }} ${{ inputs.credentials-mode }} ci"

      - name: Delete and apply sap-btp-manager secret in a loop
        run: |
          for i in {1..10}; do
            kubectl delete -f ./examples/btp-manager-secret.yaml
            sleep 0.5
            kubectl apply -f ./examples/btp-manager-secret.yaml
            sleep 0.5
          done

      - name: Fetch metrics from btp-manager-controller-manager
        run: |
          MAX_AVERAGE_RECONCILE_TIME=5
          kubectl port-forward deployment/btp-manager-controller-manager 8080:8080 -n kyma-system &
          sleep 5
          METRICS=$(curl -s http://localhost:8080/metrics)
          SUM=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_sum{controller="btpoperator"}' | awk '{printf "%.2f", $2}')
          COUNT=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_count{controller="btpoperator"}' | awk '{print $2}')
          echo "Sum of reconcile time: $SUM seconds" >> $GITHUB_STEP_SUMMARY
          echo "Count of reconciliations: $COUNT" >> $GITHUB_STEP_SUMMARY
          if [ "$COUNT" -ne 0 ]; then
            AVG=$(echo "scale=2; $SUM / $COUNT" | bc -l)
            echo "Average reconcile time: $AVG seconds" >> $GITHUB_STEP_SUMMARY
            if (( $(echo "$AVG > $MAX_AVERAGE_RECONCILE_TIME" | bc -l) )); then
              echo "::error ::average reconcile time exceeds $MAX_AVERAGE_RECONCILE_TIME seconds. Failing the test."
              exit 1
            fi
          else
            echo "Count is zero, cannot calculate average." >> $GITHUB_STEP_SUMMARY
          fi
          RECONCILE_ERRORS=$(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="error"}' | awk '{print $2}')
          echo "Reconcile errors: $RECONCILE_ERRORS" >> $GITHUB_STEP_SUMMARY
          if [ "$RECONCILE_ERRORS" -gt 0 ]; then
            echo "::error ::reconcile errors detected. Failing the test."
            exit 1
          fi
          echo "Reconcile requeues: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue"}' | awk '{print $2}')" >> $GITHUB_STEP_SUMMARY
          echo "Reconcile requeues after: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="requeue_after"}' | awk '{print $2}')" >> $GITHUB_STEP_SUMMARY
          echo "Reconcile successes: $(echo "$METRICS" | grep 'controller_runtime_reconcile_total{controller="btpoperator",result="success"}' | awk '{print $2}')" >> $GITHUB_STEP_SUMMARY
          BUCKETS=$(echo "$METRICS" | grep 'controller_runtime_reconcile_time_seconds_bucket{controller="btpoperator",le=')
          PREVIOUS_VALUE=$(echo "$BUCKETS" | tail -n 1 | awk '{print $2}')
          while read -r LINE; do
            VALUE=$(echo "$LINE" | awk '{print $2}')
            if [ "$VALUE" -ne "$PREVIOUS_VALUE" ]; then
              echo "First differing bucket: $LINE"
              echo "Previous bucket: $PREVIOUS_LINE"
              LE_VALUE=$(echo "$PREVIOUS_LINE" | awk -F'le="' '{print $2}' | awk -F'"' '{print $1}')
              echo "Maximum reconcile time is less than or equal to: $LE_VALUE seconds" >> $GITHUB_STEP_SUMMARY
              break
            fi
            PREVIOUS_LINE=$LINE
            PREVIOUS_VALUE=$VALUE
          done <<< "$(echo "$BUCKETS" | awk '{lines[NR] = $0} END {for (i = NR; i > 0; i--) print lines[i]}')"

  reconcile-after-crash-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Prepare k3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh --wait"

      - name: Wait for artifacts
        env:
          IMAGE_REPO: ${{ inputs.image-repo }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: "./scripts/await_image.sh ${{ inputs.image-tag }}"

      - name: Install BTP Manager and SAP BTP Operator
        env:
          SM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          SM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          SM_URL: ${{ secrets.SM_URL }}
          SM_TOKEN_URL: ${{ secrets.TOKENURL }}
        timeout-minutes: 2
        run: "./scripts/testing/install_module.sh ${{ inputs.image-repo }}:${{ inputs.image-tag }} ${{ inputs.credentials-mode }} ci"

      - name: Scale down btp-manager-controller-manager 
        run: |
          kubectl scale deployment btp-manager-controller-manager --replicas 0 -n kyma-system
          
      - name: Delete secrets and configmaps managed by BTP Manager
        run: |
          # We count also headers as we don't need the exact number of resources, only a way to compare if they were recreated
          MANAGED_RESOURCES_COUNT=$(kubectl get secrets,configmaps -l app.kubernetes.io/managed-by=btp-manager -n kyma-system | wc -l)
          kubectl delete secrets,configmaps -l app.kubernetes.io/managed-by=btp-manager -n kyma-system

      - name: Scale up btp-manager-controller-manager and wait for reconciliation
        timeout-minutes: 1
        run: |
          kubectl scale deployment btp-manager-controller-manager --replicas 1 -n kyma-system
          START_TIME=$(date +%s)
          echo "Waiting for btp-manager-controller-manager pod to be ready..."
          kubectl wait --for=condition=ready pod -n kyma-system -l app.kubernetes.io/component=btp-manager.kyma-project.io --timeout=300s
          END_TIME=$(date +%s)
          POD_STARTUP_DURATION=$((END_TIME - START_TIME))

          echo "Waiting for secrets and configmaps managed by BTP Manager to be recreated..."
          until [[ $(kubectl get secrets,configmaps -l app.kubernetes.io/managed-by=btp-manager -n kyma-system | wc -l) -eq $MANAGED_RESOURCES_COUNT ]]; do
            sleep 5
          done

          START_LOG_LINE=$(kubectl logs -n kyma-system deployment/btp-manager-controller-manager | grep "starting manager" | tail -1)
          START_TIMESTAMP=$(echo "$START_LOG_LINE" | jq -r .ts)
          echo "Start timestamp of certificate regeneration: $START_TIMESTAMP"

          until [[ -n "$(kubectl logs -n kyma-system deployment/btp-manager-controller-manager | grep "reconciliation succeeded" | tail -1)" ]]; do
            sleep 5
          done
          SUCCESS_LOG_LINE=$(kubectl logs -n kyma-system deployment/btp-manager-controller-manager | grep "reconciliation succeeded" | tail -1)
          SUCCESS_TIMESTAMP=$(echo "$SUCCESS_LOG_LINE" | jq -r .ts)
          echo "Success timestamp of certificate regeneration: $SUCCESS_TIMESTAMP"

          START_SECONDS=$(date -d "$START_TIMESTAMP" +%s)
          SUCCESS_SECONDS=$(date -d "$SUCCESS_TIMESTAMP" +%s)
          DURATION=$((SUCCESS_SECONDS - START_SECONDS))
          echo "Reconciliation took $DURATION seconds" >> $GITHUB_STEP_SUMMARY

  installation-duration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Prepare k3s cluster and docker registry
        run: "./scripts/testing/k3s-setup.sh --wait"

      - name: Wait for artifacts
        env:
          IMAGE_REPO: ${{ inputs.image-repo }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: "./scripts/await_image.sh ${{ inputs.image-tag }}"

      - name: Install prerequisites
        run: |
          kubectl apply -f ./deployments/prerequisites.yaml
          kubectl apply -f ./examples/btp-manager-secret.yaml

      - name: Build BTP Manager
        timeout-minutes: 2
        run: IMG=${{ inputs.image-repo }}:${{ inputs.image-tag }} make create-manifest

      - name: Install BTP Manager
        timeout-minutes: 1
        run: |
          START_TIME=$(date +%s)
          kubectl apply -f manifests/btp-operator/btp-manager.yaml
          while [[ $(kubectl get deployment/btp-manager-controller-manager -n kyma-system -o 'jsonpath={..status.conditions[?(@.type=="Available")].status}') != "True" ]];
          do echo -e "\n---Waiting for deployment to be available"; sleep 5; done
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "Installation of BTP Manager took $DURATION seconds" >> $GITHUB_STEP_SUMMARY

      - name: Apply Btpoperator
        timeout-minutes: 1
        run: |
          START_TIME=$(date +%s)
          kubectl apply -f ./examples/btp-operator.yaml
          while [[ $(kubectl get btpoperators/btpoperator -n kyma-system -ojson| jq '.status.conditions[] | select(.type=="Ready") |.status+.reason'|xargs)  != "TrueReconcileSucceeded" ]];
          do echo -e "\n---Waiting for BTP Operator to be ready and reconciled"; sleep 5; done
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "Installation of Btpoperator and reaching 'Ready' state took $DURATION seconds" >> $GITHUB_STEP_SUMMARY

      - name: Extract duration of certificate generation
        run: |
          START_LOG_LINE=$(kubectl logs -n kyma-system deployment/btp-manager-controller-manager | grep "full regeneration of certificates started" | tail -1)
          START_TIMESTAMP=$(echo "$START_LOG_LINE" | jq -r .ts)
          echo "Start timestamp of certificate regeneration: $START_TIMESTAMP"

          SUCCESS_LOG_LINE=$(kubectl logs -n kyma-system deployment/btp-manager-controller-manager | grep "full regeneration success" | tail -1)
          SUCCESS_TIMESTAMP=$(echo "$SUCCESS_LOG_LINE" | jq -r .ts)
          echo "Success timestamp of certificate regeneration: $SUCCESS_TIMESTAMP"

          START_SECONDS=$(date -d "$START_TIMESTAMP" +%s)
          SUCCESS_SECONDS=$(date -d "$SUCCESS_TIMESTAMP" +%s)
          DURATION=$((SUCCESS_SECONDS - START_SECONDS))
          echo "Generation of certs took $DURATION seconds" >> $GITHUB_STEP_SUMMARY

      - name: Delete certs and extract duration of certificate regeneration
        timeout-minutes: 1
        run: |
          kubectl delete secrets -n kyma-system ca-server-cert
          echo "Waiting for ca-server-cert to be regenerated..."
          until kubectl get secrets -n kyma-system ca-server-cert; do
            sleep 5
          done
          START_LOG_LINE=$(kubectl logs -n kyma-system deployment/btp-manager-controller-manager | grep "full regeneration of certificates started" | tail -1)
          START_TIMESTAMP=$(echo "$START_LOG_LINE" | jq -r .ts)
          echo "Start timestamp of certificate regeneration: $START_TIMESTAMP"

          SUCCESS_LOG_LINE=$(kubectl logs -n kyma-system deployment/btp-manager-controller-manager | grep "full regeneration success" | tail -1)
          SUCCESS_TIMESTAMP=$(echo "$SUCCESS_LOG_LINE" | jq -r .ts)
          echo "Success timestamp of certificate regeneration: $SUCCESS_TIMESTAMP"

          START_SECONDS=$(date -d "$START_TIMESTAMP" +%s)
          SUCCESS_SECONDS=$(date -d "$SUCCESS_TIMESTAMP" +%s)
          DURATION=$((SUCCESS_SECONDS - START_SECONDS))
          echo "Regeneration of certs took $DURATION seconds" >> $GITHUB_STEP_SUMMARY

      - name: Delete Btpoperator
        timeout-minutes: 1
        run: |
          START_TIME=$(date +%s)
          kubectl delete -f ./examples/btp-operator.yaml
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "Deletion of Btpoperator took $DURATION seconds" >> $GITHUB_STEP_SUMMARY

      - name: Delete BTP Manager
        timeout-minutes: 1
        run: |
          START_TIME=$(date +%s)
          kubectl delete -f ./manifests/btp-operator/btp-manager.yaml
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "Deletion of BTP Manager took $DURATION seconds" >> $GITHUB_STEP_SUMMARY
        